
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

//define sizes 
#define TRUE 1
#define FALSE 0
#define LENGTH_WORD 33
#define LENGTH_LABEL 51
#define LENGTH_LINE 501
#define MAX_ADDRESS 4096
#define MAX_INSTRUCTIONS 4096

//define structs
typedef struct  _Dmem
{
	char value[LENGTH_WORD];
	int address;
}Dmem;


typedef struct  _Label
{
	char name[LENGTH_LABEL];
	int address;
}Label;


typedef struct _Instruction
{
	char opcode[13];  
	char rd[6];
	char rs[6];
	char rt[6];
	char rm[6];  
	char imm1[LENGTH_LABEL];
	char imm2[LENGTH_LABEL];
} Instruction;



//functions documentary
int save_labels_to_array(FILE* file, Label* labels);
void change_imms_labels(Instruction* inst, Label* label, int line_num, int label_num);
int read_file(FILE* file, Instruction* inst, Dmem* dmem, int* dmem_cnt);
int read_line(Instruction* inst, Dmem* dmem, int* cnt, int* dmem_cnt, char* tok, int max_i);
void Initialize_instruction(Instruction* inst, int cnt, int i, char* tok);
void Initialize_word(Dmem* dmem, int dmem_cnt, int address, char* data_str);
void save_word(Dmem* dmem, int dmem_cnt, int i, char* tok);
int Is_only_comment(char* tok);
int Is_blank(char* tok);
void remove_white_space_add_0(char* str);
void print_dmemin(Dmem* dmem, FILE* fp, int dmem_num);
void print_imemin(Instruction* inst, FILE* fp, int num_lines);
void print_opcode(char* opcode, FILE* fp);
void print_regs(char* reg, FILE* fp);
void print_imm(char* imm, FILE* fp);


//main function

int main(int argc, char* argv[])
{

	//label* inst* dmem*
	int  num_lines = 0, num_labels = 0, num_dmem = 0, i = 0;
	FILE* program_file = NULL, * imemin_file = NULL, * dmemin_file = NULL;
	Label labels_array[MAX_INSTRUCTIONS] = {0};
	Instruction inst_array[MAX_INSTRUCTIONS] = {0};
	Dmem dmem_array[MAX_ADDRESS] = {0};

	//first run on the assembly code - to get the labels from the file into array of labels
	program_file = fopen(argv[1], "r");
	if (program_file == NULL)
	{
		printf("Error1: couldn't open file, exit program\n");
		exit(1);
	}

	//num_labels counts the number of labels in the array
	num_labels = save_labels_to_array(program_file, labels_array);
	fclose(program_file);

	//second run on the assembly file - to read the instruction and saving them
	program_file = fopen(argv[1], "r");
	if (program_file == NULL)
	{
		printf("Error2: couldn't open file, exit program\n");
		exit(1);
	}
	// saving all the instruction arguments in the array of instructions
	num_lines = read_file(program_file, inst_array, dmem_array, &num_dmem);
	fclose(program_file);

	//changing the labels in the imm field to addresses of the labels.
	change_imms_labels(inst_array, labels_array, num_lines, num_labels);

	//printing the instructions to imemin file
	imemin_file = fopen(argv[2], "w");
	if (imemin_file == NULL)
	{
		printf("Error3: couldn't open file, exit program\n");
		exit(1);
	}
	print_imemin(inst_array, imemin_file, num_lines);
	fclose(imemin_file);
	//end of writing to the imemin file

	//priting the memory the dmemin file
	dmemin_file = fopen(argv[3], "w");
	if (dmemin_file == NULL)
	{
		printf("Error4: couldn't open file, exit program\n");
		exit(1);
	}
	print_dmemin(dmem_array, dmemin_file, num_dmem);
	fclose(dmemin_file);

	return 0;
}



//save name and address of the labels from the assembly file to labels array
int save_labels_to_array(FILE* file, Label* labels_array)
{
	int cnt = 0, i = 0;
	char line[LENGTH_LINE], copy_line[LENGTH_LINE];
	char* checkiflabel = NULL;
	char* find_imm1 = NULL;
	char* find_imm2 = NULL;
	char* comment = NULL;

	//read from file until its end
	while (fgets(line, LENGTH_LINE, file))
	{
		checkiflabel = strchr(line, ':');
		//checks if there is a possible for a label
		if (checkiflabel != NULL)
		{
			//gets the label possible name
			char* tok = strtok(line, ":");
			//checks if there any comments, if we didn't find # it is a label
			if (strchr(tok, '#') == NULL)
			{
				//remove white spaces and save the label in array
				remove_white_space_add_0(tok);
				strcpy(labels_array[i].name, tok);
				labels_array[i].address = cnt;
				i++;
			}
			//checks if there is a command in the same row with label
			tok = strtok(NULL, ":");
			comment = strchr(tok, '#');
			//if no comment after the label
			if (comment == NULL)
			{
				//if there's nothing else beside the label then reduce the counter
				if (Is_blank(tok))
					cnt--;
			}
			else {
				tok = strtok(tok, "#");
				if (Is_blank(tok))
					cnt--;
			}
		}
		//there is no ":" in the current line
		remove_white_space_add_0(line);
		if (line != NULL) {
			char* tok = strtok(line, " ");
			if (tok != NULL) {
				//checks if the line is a '.word'
				if (strstr(tok, ".word") == NULL)
				{
					if (line[0] != '#')
						// pc counter is advanced beacouse there is a command in the row
						cnt++;
				}
			}
		}
	}
	//return the number of labels in file
	return i;
}





//for the second time we go over the file - changes imm field that contains the label name to the label's address
void change_imms_labels(Instruction* inst, Label* label, int line_num, int label_num)
{
	char address_str[MAX_ADDRESS];
	int inst_i;
	int label_i1;
	int label_i2;

	for (inst_i = 0; inst_i < line_num; inst_i++) {
		//checks if there any imm is a label
		if (isalpha(inst[inst_i].imm1[0])) {
			for (label_i1 = 0; label_i1 < label_num; label_i1++) {
				//search for lable name in the labels array
				if (strncmp(label[label_i1].name, inst[inst_i].imm1, strlen(label[label_i1].name)) == 0) {
					//changing the imm field to the adress of the label
					sprintf(address_str, "%d", label[label_i1].address);
					strcpy(inst[inst_i].imm1, address_str);
				}
			}
		}
		// same for imm2
		if (isalpha(inst[inst_i].imm2[0])) {
			for (label_i2 = 0; label_i2 < label_num; label_i2++) {
				if (strncmp(label[label_i2].name, inst[inst_i].imm2, strlen(label[label_i2].name)) == 0) {
					sprintf(address_str, "%d", label[label_i2].address);
					strcpy(inst[inst_i].imm2, address_str);
				}
			}
		}
	}
}




//goes through the file and saves the arguments of the instructions and the pseudointruction.
int read_file(FILE* file, Instruction* inst, Dmem* dmem, int* dmem_cnt)
{
	char line[LENGTH_LINE], copy_line[LENGTH_LINE];
	char* comment;
	char* find = NULL;
	int i = 0, cnt = 0, check = 0;

	while (fgets(line, LENGTH_LINE, file))
	{
		// search for labels in file 
		find = strchr(line, ':');
		//there is a ":" in the line
		if (find != NULL)
		{
			strcpy(copy_line, line);
			char* tok = strtok(line, ":");
			comment = strchr(tok, '#');
			//checks if this is not a comment
			if (comment == NULL)
			{
				tok = strtok(copy_line, ": ,");
				// the line starts with a label so we have up to 7 elements in the row
				i = read_line(inst, dmem, &cnt, dmem_cnt, tok, 7);
				if (i < 3)
				{
					//no need to advance pc 
					cnt--;
				}
			}
			//the ":" is in a comment
			else
			{
				check = Is_only_comment(copy_line);
				if (check == TRUE)
					//cheks if the line has only a comment you need to go to the next line in file
					continue;
				else
				{
					tok = strtok(line, " ,");
					// the line doesn't start with a label so we have up to 7 elements in the row
					i = read_line(inst, dmem, &cnt, dmem_cnt, tok, 7);
				}
			}
			//pc++
			cnt++;
		}
		// the line doesn't have the character ":" 
		else
		{
			remove_white_space_add_0(line);
			if (*line != NULL)
			{
				char* tok = strtok(line, " ,");
				//check if the line has a comment
				comment = strchr(tok, '#');
				//if the line doesn't have comment
				if (comment == NULL)
				{
					// the line doesn't start with a label so we have up to 7 elements
					i = read_line(inst, dmem, &cnt, dmem_cnt, tok, 7);
					//if the line is not empty - pc++
					if (i > 1)
						cnt++;
				}
			}
		}
	}
	//returning the number of instructions for the Assembler
	return cnt;
}



// gets a line from the file and saves the instruction in the correct fields of struct
int read_line(Instruction* inst, Dmem* dmem, int* cnt, int* dmem_cnt, char* tok, int max_i) {
	int i = 0;

	while (tok != NULL && i < max_i)
	{
		remove_white_space_add_0(tok);
		if (*tok != NULL)
		{
			//no need to save comments
			if (tok[0] == '#')
				break;
		}

		if (i == 0)   
		{
			if (strstr(tok, ".word") != NULL)
			{
				save_word(dmem, *dmem_cnt, i, tok);
				//pseudoinstruction does not advance the pc counter and dmem_cnt advance in one
				*cnt -= 1;
				*dmem_cnt += 1;
				// pseudoinstruction contains 3 fields
				i = 3;
				break;
			}
		}
		// saves the fields into the instruction struct
		Initialize_instruction(inst, *cnt, i, tok);
		i++;

		tok = strtok(NULL, " ,");
	}
	return i;
}


// saves the instructions arguments in their fields in the struct
void Initialize_instruction(Instruction* inst, int cnt, int i, char* tok)
{
	switch (i)
	{
	case 0:
		strcpy(inst[cnt].opcode, tok);
		break;
	case 1:
		strcpy(inst[cnt].rd, tok);
		break;
	case 2:
		strcpy(inst[cnt].rs, tok);
		break;
	case 3:
		strcpy(inst[cnt].rt, tok);
		break;
	case 4:
		strcpy(inst[cnt].rm, tok);
		break;
	case 5:
		strcpy(inst[cnt].imm1, tok);
		break;
	case 6:
		strcpy(inst[cnt].imm2, tok);
		break;

	default:
		break;
	}

}



// takes paramters from .word and saves it
void save_word(Dmem* dmem, int dmem_cnt, int i, char* tok)
{
	char data_str[LENGTH_LINE];
	int address = 0, data = 0;
	while (tok != NULL)
	{
		//if it is an address
		if (i == 1)
		{
			//converts from string to an integer (if address hex or dec)
			address = strtoll(tok, NULL, 0);
		}
		//save the data
		else if (i == 2)
		{
			//converts string to int
			data = strtoll(tok, NULL, 0);
			sprintf(data_str, "%d", data);
		}
		tok = strtok(NULL, " ");
		i++;
	}
	//sets data in the new address and updates array
	Initialize_word(dmem, dmem_cnt, address, data_str);
}


// saves the data and the address in the struct fields
void Initialize_word(Dmem* dmem, int dmem_cnt, int address, char* data_str)
{
	dmem[dmem_cnt].address = address;
	strcpy(dmem[dmem_cnt].value, data_str);
}


// prints the pseudoinstruction to the dmemin file
void print_dmemin(Dmem* dmem, FILE* fp, int dmem_num)
{
	int max_mem = MAX_ADDRESS;
	int val_num = 0, dmem_inc = 0, i = 0, j, flag = 0;
	char hex[12];
	while ((i < max_mem) && (dmem_inc < dmem_num))
	{
		for (j = 0; j < dmem_num; j++)
		{
			if (i == dmem[j].address)
			{
				//convert string to hex or dec and then convert to a 8 digits hexadecimal number
				val_num = strtoll(dmem[j].value, NULL, 0);
				sprintf(&hex, "%08X", val_num & 0xffffffff);
				fprintf(fp, "%s\n", hex);
				dmem_inc++;
				flag = 1;
			}
		}
		if (!flag)
			fprintf(fp, "%s\n", "00000000");
		//change flag
		flag = 0;
		i++;
	}
}

// prints intructions from the assembly file to the imemin file as an 12 digits hexadecimal
void print_imemin(Instruction* inst, FILE* fp, int num_lines)
{
	int imm_num = 0;
	
	int i, max_address;
	max_address = num_lines;

	for (i = 0; i < max_address; i++)
	{
		//prints all the instruction until maximum address 
		print_opcode(inst[i].opcode, fp);
		print_regs(inst[i].rd, fp);
		print_regs(inst[i].rs, fp);
		print_regs(inst[i].rt, fp);
		print_regs(inst[i].rm, fp); 
		print_imm(inst[i].imm1, fp);
		print_imm(inst[i].imm2, fp);
		fprintf(fp, "\n");
	}
}

// prints the opcode to imemin file in hex
void print_opcode(char* opcode, FILE* fp)
{
	if (strstr(opcode, "add") != NULL)
		fprintf(fp, "00");
	else if (strstr(opcode, "sub") != NULL)
		fprintf(fp, "01");
	else if (strstr(opcode, "mac") != NULL)
		fprintf(fp, "02");
	else if (strstr(opcode, "and") != NULL)
		fprintf(fp, "03");
	else if (strstr(opcode, "or") != NULL)
		fprintf(fp, "04");
	else if (strstr(opcode, "xor") != NULL)
		fprintf(fp, "05");
	else if (strstr(opcode, "sll") != NULL)
		fprintf(fp, "06");
	else if (strstr(opcode, "sra") != NULL)
		fprintf(fp, "07");
	else if (strstr(opcode, "srl") != NULL)
		fprintf(fp, "08");
	else if (strstr(opcode, "beq") != NULL)
		fprintf(fp, "09");
	else if (strstr(opcode, "bne") != NULL)
		fprintf(fp, "0A");
	else if (strstr(opcode, "blt") != NULL)
		fprintf(fp, "0B");
	else if (strstr(opcode, "bgt") != NULL)
		fprintf(fp, "0C");
	else if (strstr(opcode, "ble") != NULL)
		fprintf(fp, "0D");
	else if (strstr(opcode, "bge") != NULL)
		fprintf(fp, "0E");
	else if (strstr(opcode, "jal") != NULL)
		fprintf(fp, "0F");
	else if (strstr(opcode, "lw") != NULL)
		fprintf(fp, "10");
	else if (strstr(opcode, "sw") != NULL)
		fprintf(fp, "11");
	else if (strstr(opcode, "reti") != NULL)
		fprintf(fp, "12");
	else if (strstr(opcode, "in") != NULL)
		fprintf(fp, "13");
	else if (strstr(opcode, "out") != NULL)
		fprintf(fp, "14");
	else if (strstr(opcode, "halt") != NULL)
		fprintf(fp, "15");
	else
		fprintf(fp, "00");

}

//prints registers to imemin file in hex
void print_regs(char* reg, FILE* fp)
{
	if (strcmp(reg, "$zero") == 0)
		fprintf(fp, "0");
	else if (strcmp(reg, "$imm1") == 0)
		fprintf(fp, "1");
	else if (strcmp(reg, "$imm2") == 0)
		fprintf(fp, "2");
	else if (strcmp(reg, "$v0") == 0)
		fprintf(fp, "3");
	else if (strcmp(reg, "$a0") == 0)
		fprintf(fp, "4");
	else if (strcmp(reg, "$a1") == 0)
		fprintf(fp, "5");
	else if (strcmp(reg, "$a2") == 0)
		fprintf(fp, "6");
	else if (strcmp(reg, "$t0") == 0)
		fprintf(fp, "7");
	else if (strcmp(reg, "$t1") == 0)
		fprintf(fp, "8");
	else if (strcmp(reg, "$t2") == 0)
		fprintf(fp, "9");
	else if (strcmp(reg, "$s0") == 0)
		fprintf(fp, "A");
	else if (strcmp(reg, "$s1") == 0)
		fprintf(fp, "B");
	else if (strcmp(reg, "$s2") == 0)
		fprintf(fp, "C");
	else if (strcmp(reg, "$gp") == 0)
		fprintf(fp, "D");
	else if (strcmp(reg, "$sp") == 0)
		fprintf(fp, "E");
	else if (strcmp(reg, "$ra") == 0)
		fprintf(fp, "F");
	else
		fprintf(fp, "0");
}


//prints imm to the imemin file and translates it to hexadecimal number
void print_imm(char* imm, FILE* fp)
{
	int imm_num = 0;
	char hex[12];
	//converts string to int
	imm_num = strtoll(imm, NULL, 0);
	//converts to 3 digits number in hexadecimal 
	sprintf(&hex, "%03X", imm_num & 0xfff);
	fprintf(fp, "%s", hex);
}


//returns TRUE if it's only a comment
int Is_only_comment(char* tok)
{
	char* tmp = strtok(tok, " ");
	remove_white_space_add_0(tmp);
	if (tmp[0] == '#')
		return TRUE;

	return FALSE;

}


// deletes the white spaces that are at the beginning of the given string
void remove_white_space_add_0(char* str)
{
	int source_i, dest_i;
	char str_without_spaces[LENGTH_LINE];

	//find the first non-space index
	for (source_i = 0; isspace(str[source_i]); source_i++);

	//checks if the string was blank
	if (source_i == strlen(str))
	{
		*str = NULL;
		return;
	}
	for (dest_i = 0; source_i < strlen(str); source_i++)
	{
		//create the str without spaces
		str_without_spaces[dest_i] = str[source_i];
		dest_i++;
	}
	str_without_spaces[dest_i] = '\0';
	strncpy(str, str_without_spaces, strlen(str));
}


// checks if the given string is blank or not
int Is_blank(char* tok)
{
	int char_i, isblank = TRUE;
	for (char_i = 0; char_i < strlen(tok); char_i++)
	{
		if (!isspace(tok[char_i]))
		{
			isblank = FALSE;
			break;
		}
	}
	return isblank;
}



