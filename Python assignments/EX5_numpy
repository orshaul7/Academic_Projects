''' Exercise #9. Python for Engineers.'''

import numpy as np
import matplotlib.pyplot as plt
import imageio
import math


#########################################
# Question 1 - do not delete this comment
#########################################
class Roman():

    def get_int_from_roman(self):
        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        roman_string = self.roman_value.strip('-')
        int_val = 0
        for counter in range(len(roman_string)):
            if counter > 0 and rom_val[roman_string[counter]] > rom_val[roman_string[counter - 1]]:
                int_val += rom_val[roman_string[counter]] - 2 * rom_val[roman_string[counter - 1]]
            else:
                int_val += rom_val[roman_string[counter]]
        int_val = -int_val if self.is_neg else int_val
        return int_val

    def get_roman_from_int(self):
        num = self.int_value if not self.is_neg else -self.int_value
        roman_num = '' if not self.is_neg else '-'
        counter = 0

        roman_char = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]
        int_vals = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]

        while num > 0:
            for _ in range(num // int_vals[counter]):
                roman_num += roman_char[counter]
                num -= int_vals[counter]
            counter += 1
        return roman_num

    def __init__(self, input_value):
        if isinstance(input_value, int):
            self.int_value = input_value
            if (self.int_value < 0):
                self.is_neg = True
            else:
                self.is_neg = False
            self.roman_value = self.get_roman_from_int()
        else:
            self.roman_value = input_value
            if ('-' == self.roman_value[0]):
                self.is_neg = True
            else:
                self.is_neg = False
            self.int_value = self.get_int_from_roman()

    def __str__(self):
        return 'The integer value is ' + str(self.int_value) + ' and the Roman Numeral is denoted by \'' + str(
            self.roman_value) + '\''

    def __repr__(self):
        return self.roman_value

    def __neg__(self):
        return Roman(-self.int_value)

    def __add__(self, other):
        if isinstance(other, int):
            value = self.int_value + other
        elif isinstance(other, Roman):
            value = self.int_value + other.int_value
        if value == 0:
            raise ValueError('Roman number cant be zero')
        return Roman(value)

    def __lt__(self, other):
        if isinstance(other, int):
            return self.int_value < other
        else:
            return self.int_value < other.int_value

    def __gt__(self, other):
        if isinstance(other, int):
            return self.int_value > other
        else:
            return self.int_value > other.int_value

    def __floordiv__(self, other):
        if isinstance(other, int):
            divided_num = self.int_value // other
        else:
            divided_num = self.int_value // other.int_value
        if (divided_num == 0):
            raise ValueError('Roman number cant be zero')
        return Roman(divided_num)

#########################################
# Question 2 - do not delete this comment
#########################################

def load_training_data(filename):
    data_numbers=np.genfromtxt(filename,delimiter=',')
    data_strings=np.genfromtxt(filename,delimiter=',',dtype=str)
    data_values={}
    data_values['data']=data_numbers[1:,1:]
    data_values['column_names']=data_strings[0,1:]
    data_values['row_names']=data_strings[1:,0]
    return data_values

def get_highest_weight_loss_trainee(data_dict):
    first_col_data=data_dict['data'][:,0]
    last_cal_data=data_dict['data'][:,-1]
    first_last=first_col_data-last_cal_data
    participant_index=first_last.argmax()
    return data_dict['row_names'][participant_index]

def get_diff_data(data_dict):
    first_cols=data_dict['data'][:,0:-1]
    last_cols=data_dict['data'][:,1:]
    return last_cols-first_cols

def get_highest_loss_month(data_dict):
    if len(data_dict['column_names'])==1:
      data_dict['column_names'][0]
    diff_data=get_diff_data(data_dict)
    sum_mat=diff_data.sum(axis=0)
    month_index=sum_mat.argmin()+1
    return data_dict['column_names'][month_index]

def get_relative_diff_table(data_dict):
    diff_mat=get_diff_data(data_dict)
    first_cols=data_dict['data'][:,0:-1]
    return diff_mat/first_cols

#########################################
# Question 3 - do not delete this comment
#########################################

def compute_entropy(img):
    image=imageio.imread(img)
    bin_image=np.bincount(image.flatten())
    bin_image=bin_image[bin_image>0]
    num_of_pixels=bin_image.sum()
    entropy=0
    for i in range(len(bin_image)):
      probabilty=bin_image[i]/num_of_pixels
      entropy+=(-probabilty*math.log(probabilty,2))
    return entropy

def nearest_enlarge(img, a):
    image=imageio.imread(img)
    if(a<=1):
      return image
    larger_im=np.zeros((image.shape[0]*a,image.shape[1]*a))
    opposite_a=1/a
    for i in range(larger_im.shape[0]):
      for j in range(larger_im.shape[1]):
        larger_im[i][j]=image[math.floor(i*opposite_a)][math.floor(j*opposite_a)]
    return larger_im
